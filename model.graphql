#graphql
type Query {
  Pipelane(name: ID!): Pipelane
  Pipetask(taskVariantName: ID!, pipelaneName: ID!): Pipetask
  TaskType(type: ID!): TaskType

  taskTypes: [TaskType]
  pipelanes(search: String): [Pipelane]
  pipelaneTasks(pipelaneName: ID!): [Pipetask]
}

type TaskType {
  type: ID
  variants: [ID]
}

type Pipelane {
  name: ID!
  input: String
  schedule: String
  active: Boolean
  tasks: [Pipetask]
  executions: [PipelaneExecution]
}

input CreatePipelaneInput {
  name: ID!
  input: String
  schedule: String
  active: Boolean
  tasks: [CreatePipetaskInput]
}

type Pipetask {
  pipelaneName: ID!
  taskVariantName: ID!
  taskTypeName: ID!
  active: Boolean
  isParallel: Boolean
  input: String
  executions: [PipetaskExecution]
}

input CreatePipetaskInput {
  taskVariantName: ID!
  taskTypeName: ID!
  isParallel: Boolean
  input: String
  pipelaneName: String
}

type PipelaneExecution {
  id: ID!
  pipelaneName: ID!
  isRunning: Boolean
  definition: Pipelane
  status: Status
  logs: [String]
}

type PipetaskExecution {
  id: ID!
  taskVariantName: ID!
  pipelaneName: ID!
  definition: Pipetask
  startTime: String
  status: Status
  endTime: String
}

enum Status {
  SUCCESS
  IN_PROGRESS
  FAILURE
}

type Mutation {
  createPipelane(data: CreatePipelaneInput!): Pipelane!
  createPipelaneTask(data: CreatePipetaskInput!): Pipetask!
}
