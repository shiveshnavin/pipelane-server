#graphql
type Query {
  Pipelane(name: ID): Pipelane
  TaskType(type: ID): TaskType

  taskTypes: [TaskType]
  pipelanes: [Pipelane]
}

type TaskType {
  type: ID
  variants: [ID]
}

type Pipelane {
  name: ID
  inputs: String
  schedule: String
  active: Boolean
  tasks: [Pipetask]
  executions: [PipelaneExecution]
}

input CreatePipelaneInput {
  name: ID!
  inputs: String
  schedule: String
  active: Boolean
  tasks: [CreatePipetaskInput]
}

type Pipetask {
  pipelaneName: ID!
  taskVariantName: ID!
  taskTypeName: String!
  isParallel: Boolean
  input: String
  executions: [PipetaskExecution]
}

input CreatePipetaskInput {
  taskVariantName: ID!
  taskTypeName: String!
  isParallel: Boolean
  input: String
  pipelaneName: String
}

type PipelaneExecution {
  id: ID
  isRunning: Boolean
  definition: Pipelane
  status: Status
  logs: [String]
}

type PipetaskExecution {
  id: ID
  definition: Pipetask
  startTime: String
  status: Status
  endTime: String
}

enum Status {
  SUCCESS
  IN_PROGRESS
  FAILURE
}

type Mutation {
  createPipelane(data: CreatePipelaneInput!): Pipelane!
  createPipelaneTask(data: CreatePipetaskInput!): Pipetask!
}
