#graphql
type Query {
  Pipelane(name: ID!): Pipelane
  Pipetask(name: ID!, pipelaneName: ID!): Pipetask
  TaskType(type: ID!): TaskType

  taskTypes: [TaskType]
  pipelanes(search: String): [Pipelane]
  pipelaneTasks(pipelaneName: ID!): [Pipetask]
}

type TaskType {
  type: ID!
  variants: [ID]
}

type Pipelane {
  name: ID!
  input: String
  schedule: String
  active: Boolean
  updatedTimestamp: String
  retryCount: Int
  executionsRetentionCount: Int
  nextRun: String
  tasks: [Pipetask]
  executions: [PipelaneExecution]
}

input CreatePipelanePayload {
  name: ID!
  input: String
  schedule: String
  retryCount: Int
  executionsRetentionCount: Int
  active: Boolean
  tasks: [CreatePipetaskPayload]
}

type Pipetask {
  name: ID!
  step: Int
  pipelaneName: ID!
  taskVariantName: ID!
  taskTypeName: ID!
  active: Boolean
  isParallel: Boolean
  input: String
  executions: [PipetaskExecution]
}

input CreatePipetaskPayload {
  name: ID!
  pipelaneName: ID!
  taskVariantName: ID!
  taskTypeName: ID!
  isParallel: Boolean
  active: Boolean
  input: String
}

type PipelaneExecution {
  id: ID!
  name: ID!
  isRunning: Boolean
  definition: Pipelane
  startTime: String
  status: Status
  endTime: String
  output: String
}

type PipetaskExecution {
  id: ID!
  pipelaneExId: ID!
  name: ID!
  pipelaneName: ID!
  definition: Pipetask
  startTime: String
  status: Status
  endTime: String
  output: String
}

enum Status {
  SUCCESS
  IN_PROGRESS
  PAUSED
  FAILURE
}

type Mutation {
  createPipelane(data: CreatePipelanePayload!): Pipelane!
  createPipelaneTask(data: CreatePipetaskPayload!): Pipetask!
  deletePipelane(name: ID!): Status!
  deletePipelaneTask(pipelaneName: ID!, taskVariantName: ID!): Status!
  createPipelaneExecution(data: PipelaneExecution!): PipelaneExecution!
}
